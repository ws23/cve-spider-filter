import scrapy, datetime, logging, sys
from nvd.items import NvdItem
from nvd.middlewares import SeleniumRequest
sys.path.append("C:\\Users\\momo\\cve\\")
import conf

class NvdSpider(scrapy.Spider):

    # 將 log 逐項拆成 array
    def log_array(self, str):
        tmp = str.split(',')
        length = len(tmp)
        s = tmp[3]
        for i in range (4, 4+length-7, 1):
            s += "," + tmp[i]
        content = [tmp[0], tmp[1], tmp[2], s, tmp[length-3], tmp[length-2], tmp[length-1]]
        return content


    name = 'nvd'

    allowed_domains = ['nvd.nist.gov']
    start_urls = []
    
    today = datetime.date.today()
    str_today = today.strftime('%Y%m%d')
    
    file_cve = open(conf.path + "cve.csv", "r+", encoding="utf-8")     # 尚未有分數的清單
    cves = file_cve.read().splitlines()
    file_cve.seek(0)
    file_cve.truncate()
    file_cve.write("entry_data,cve_published_date,cve_id,cve_desc,cve_score,cve_severity,product\n")
    file_cve.close()
    # 刪除 csv 標題
    del cves[0]
    
    # 將待掃清單加入 url list
    # cve.csv
    #   [0] entry_data
    #   [1] cve_published_date
    #   [2] cve_id
    #   [3] cve_desc
    #   [4] cve_score
    #   [5] cve_severity
    #   [6] product
    


    # 爬蟲起點
    def start_requests(self):
        for i in self.cves: 
            tmp = self.log_array(i)
            cveid = tmp[2]
            u = "https://nvd.nist.gov/vuln/detail/{}" . format(cveid)
            self.start_urls.append(u)
        i = 0
        for u in self.start_urls:
            yield SeleniumRequest(url=u, callback=self.search, meta={'log':self.cves[i]})
            i = i+1

    def search(self, response):
        
    
        cvss = response.xpath("/html/body/div[2]/div[2]/div[2]/table/tbody/tr/td/div/div[1]/div[2]/div[2]/div[1]/div[2]/span/span/a/text()").extract_first()
        logging.debug(cvss)
        content = self.log_array(response.meta['log'])
        str_today = self.today.strftime('%Y/%m/%d')
        
        file_sent = open(conf.path + "sent\\" + self.str_today + ".csv", "a", encoding="utf-8")     # 要寄出通知的清單
        file_pass = open(conf.path + "pass.csv", "a", encoding="utf-8")     # 低風險
        file_notified = open(conf.path + "notified.csv", "a", encoding="utf-8")     # 中高風險
        file_cve = open(conf.path + "cve.csv", "a", encoding="utf-8")     # 尚未有分數的清單
        
        
        # 依舊沒有分數，寫入 cve.csv
        if cvss == "N/A":
            data = str_today + "," + content[1] + "," + content[2] + "," + content[3] + ",,," + content[6] + "\n"
            file_cve.write(data)
            
        # 新增分數，判斷是否通知
        else:
            severity = cvss.split(' ')[1]
            score = cvss.split(' ')[0]
            data = str_today + "," + content[1] + "," + content[2] + "," + content[3] + "," + score + "," + severity + "," + content[6] + "\n"
            # 低風險不通知
            if severity == "LOW":
                file_pass.write(data)
            # 中等風險以上要通知
            elif severity == "MEDIUM" or severity == "HIGH" or severity == "CRITICAL": 
                file_notified.write(data)
                file_sent.write(data)
                
        file_cve.close()
        file_pass.close()
        file_notified.close()
        file_sent.close()